{"version":3,"sources":["../src/createPobpackCompiler.js"],"names":["buildThrowOnError","stats","hasErrors","Error","toString","hash","timings","chunks","chunkModules","modules","children","version","cached","cachedAssets","reasons","source","errorDetails","colors","process","stdout","isTTY","bundleName","webpackConfig","compilationSuccessInfo","compiler","bar","apply","percentage","msg","yellow","bold","incomplete","complete","total","clear","stream","update","length","substr","clearConsole","clean","output","path","run","done","then","watch","callback","err"],"mappings":"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","file":"createPobpackCompiler.js","sourcesContent":["import { execSync } from 'child_process';\nimport chalk from 'chalk';\nimport promiseCallback from 'promise-callback-factory/src';\nimport ProgressBar from 'progress';\nimport webpack from 'webpack';\nimport ProgressPlugin from 'webpack/lib/ProgressPlugin';\nimport FriendlyErrorsWebpackPlugin from 'friendly-errors-webpack-plugin';\n\nconst buildThrowOnError = (stats) => {\n  if (!stats.hasErrors()) {\n    return stats;\n  }\n\n  throw new Error(stats.toString({\n    hash: false,\n    timings: false,\n    chunks: false,\n    chunkModules: false,\n    modules: false,\n    children: true,\n    version: true,\n    cached: false,\n    cachedAssets: false,\n    reasons: false,\n    source: false,\n    errorDetails: false,\n    colors: process.stdout.isTTY,\n  }));\n};\n\ntype WebpackWatcherType = any;\nexport type WatchCallbackType = (stats: any) => void;\n\nexport type PobpackCompilerType = {|\n  compiler: any,\n  webpackConfig: Object,\n  clean: () => string,\n  run: () => Promise,\n  watch: (callback: WatchCallbackType) => WebpackWatcherType,\n|};\n\nexport default (bundleName: string, webpackConfig, compilationSuccessInfo): PobpackCompilerType => {\n  const compiler = webpack({\n    ...webpackConfig,\n  });\n\n  if (process.stdout.isTTY) {\n    let bar;\n    compiler.apply(new ProgressPlugin((percentage: number, msg: string) => {\n      if (percentage === 0) {\n        bar = new ProgressBar(\n          `${chalk.yellow.bold(`Building ${bundleName} bundle...`)} ${chalk.bold(':percent')} [:bar] → :msg`,\n          { incomplete: ' ', complete: '▇', total: 50, clear: true, stream: process.stdout },\n        );\n      // } else if (percentage === 1) {\n      //   // bar.clear();\n      //   bar = null;\n      } else {\n        bar.update(percentage, { msg: msg.length > 20 ? `${msg.substr(0, 20)}...` : msg });\n      }\n    }));\n  }\n\n  // human-readable error messages\n  compiler.apply(new FriendlyErrorsWebpackPlugin({\n    compilationSuccessInfo,\n    clearConsole: false,\n  }));\n\n  return {\n    compiler,\n    webpackConfig,\n    clean: () => webpackConfig.output.path && execSync(`rm -Rf ${webpackConfig.output.path}`),\n    run: () => promiseCallback(done => compiler.run(done)).then(buildThrowOnError),\n    watch: (callback) => compiler.watch({}, (err, stats) => {\n      if (err) return;\n      if (stats.hasErrors()) return;\n      buildThrowOnError(stats);\n      callback(stats);\n    }),\n  };\n};\n"]}