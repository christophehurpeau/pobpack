{"version":3,"sources":["../src/createPobpackCompiler.js"],"names":["buildThrowOnError","stats","hasErrors","Error","toString","bundleName","webpackConfig","progressBar","successMessage","compiler","process","stdout","isTTY","bar","apply","percentage","msg","yellow","bold","incomplete","complete","total","clear","stream","update","length","substr","clean","output","path","run","done","then","watch","callback","err"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,MAAMA,oBAAqBC,KAAD,IAAW;AACnC,MAAI,CAACA,MAAMC,SAAN,EAAL,EAAwB;AACtB,WAAOD,KAAP;AACD;;AAED,QAAM,IAAIE,KAAJ,CAAUF,MAAMG,QAAN,KAAmB,IAAnB,CAAV,CAAN;AACD,CAND;;AAQA,4EAA0B,2BAA1B;;AACO,sGAAyB,+BAAC,qCAAO,2BAAP,CAAD,+BAAgB,4BAAhB,EAAzB;;AAEA,4GAA2B,kCAChC,2CAAU,2BAAV,CADgC,EAEhC,gDAAe,8BAAf,CAFgC,EAGhC,wCAAO,4DAAM,8BAAN,EAAP,CAHgC,EAIhC,sCAAK,4DAAM,oCAAN,EAAL,CAJgC,EAKhC,wCAAO,+BAAC,wCAAU,iBAAV,CAAD,+BAAiC,kBAAjC,EAAP,CALgC,CAA3B;;AAQP,0FAAiC,kCAC/B,8CAAa,+BAAC,+BAAD,CAAb,CAD+B,EAE/B,iDAAgB,+BAAC,8BAAD,CAAhB,CAF+B,CAAjC;;kBAKe,+BACbC,UADa,EAEbC,aAFa,EAGb,SAHa,EAIW;AAAA,wBAHd,8BAGc;;AAAA,mDAAvB,mBAAuB;;AAAA;;AAAA,MADxB,EAAEC,cAAc,IAAhB,EAAsBC,cAAtB,EACwB,GADc,yBACd;;AACxB,QAAMC,WAAW,yCACZH,aADY,EAAjB;;AAIA,MAAIC,eAAeG,QAAQC,MAAR,CAAeC,KAAlC,EAAyC;AACvC,QAAIC,GAAJ;AACAJ,aAASK,KAAT,CAAe,6BAAmB,CAACC,UAAD,EAAqBC,GAArB,KAAqC;AAAA,4BAA1B,8BAA0B;;AAAA,qBAAb,8BAAa;;AAAA;;AAAA;;AACrE,UAAID,eAAe,CAAnB,EAAsB;AACpBF,cAAM,uBACH,GAAE,gBAAMI,MAAN,CAAaC,IAAb,CAAmB,YAAWb,UAAW,YAAzC,CAAsD,IAAG,gBAAMa,IAAN,CAAW,UAAX,CAAuB,gBAD/E,EAEJ,EAAEC,YAAY,GAAd,EAAmBC,UAAU,GAA7B,EAAkCC,OAAO,EAAzC,EAA6CC,OAAO,IAApD,EAA0DC,QAAQb,QAAQC,MAA1E,EAFI,CAAN;AAIF;AACA;AACA;AACC,OARD,MAQO;AACLE,YAAIW,MAAJ,CAAWT,UAAX,EAAuB,EAAEC,KAAKA,IAAIS,MAAJ,GAAa,EAAb,GAAmB,GAAET,IAAIU,MAAJ,CAAW,CAAX,EAAc,EAAd,CAAkB,KAAvC,GAA8CV,GAArD,EAAvB;AACD;AACF,KAZc,CAAf;AAaD;;AAED;AACAP,WAASK,KAAT,CAAe,0CAAgC,EAAET,UAAF,EAAcG,cAAd,EAAhC,CAAf;;AAEA,4BAAO;AACLC,YADK;AAELH,iBAFK;AAGLqB,WAAO,MAAMrB,cAAcsB,MAAd,CAAqBC,IAArB,IAA6B,6BAAU,UAASvB,cAAcsB,MAAd,CAAqBC,IAAK,EAA7C,CAHrC;AAILC,SAAK,MAAM,sCAAgBC,QAAQtB,SAASqB,GAAT,CAAaC,IAAb,CAAxB,EAA4CC,IAA5C,CAAiDhC,iBAAjD,CAJN;AAKLiC,WAAQC,QAAD,IAAczB,SAASwB,KAAT,KAAmB,CAACE,GAAD,EAAMlC,KAAN,KAAgB;AACtD,UAAIkC,GAAJ,EAAS;AACT,UAAIlC,MAAMC,SAAN,EAAJ,EAAuB;AACvBF,wBAAkBC,KAAlB;AACAiC,eAASjC,KAAT;AACD,KALoB;AALhB,GAAP;AAYD,C","file":"createPobpackCompiler.js","sourcesContent":["import { execSync } from 'child_process';\nimport chalk from 'chalk';\nimport promiseCallback from 'promise-callback-factory/src';\nimport ProgressBar from 'progress';\nimport webpack from 'webpack';\nimport ProgressPlugin from 'webpack/lib/ProgressPlugin';\nimport FriendlyErrorsWebpackPlugin from './FriendlyErrorsWebpackPlugin';\n\nconst buildThrowOnError = (stats) => {\n  if (!stats.hasErrors()) {\n    return stats;\n  }\n\n  throw new Error(stats.toString({}, true));\n};\n\ntype WebpackWatcherType = any;\nexport type WatchCallbackType = (stats: any) => void;\n\nexport type PobpackCompilerType = {|\n  compiler: any,\n  webpackConfig: Object,\n  clean: () => string,\n  run: () => Promise,\n  watch: (callback: WatchCallbackType) => WebpackWatcherType,\n|};\n\ntype CreateComplierOptionsType = {|\n  progressBar: ?boolean,\n  successMessage: ?string,\n|};\n\nexport default (\n  bundleName: string,\n  webpackConfig,\n  { progressBar = true, successMessage }: CreateComplierOptionsType = {}\n): PobpackCompilerType => {\n  const compiler = webpack({\n    ...webpackConfig,\n  });\n\n  if (progressBar && process.stdout.isTTY) {\n    let bar;\n    compiler.apply(new ProgressPlugin((percentage: number, msg: string) => {\n      if (percentage === 0) {\n        bar = new ProgressBar(\n          `${chalk.yellow.bold(`Building ${bundleName} bundle...`)} ${chalk.bold(':percent')} [:bar] → :msg`,\n          { incomplete: ' ', complete: '▇', total: 50, clear: true, stream: process.stdout },\n        );\n      // } else if (percentage === 1) {\n      //   // bar.clear();\n      //   bar = null;\n      } else {\n        bar.update(percentage, { msg: msg.length > 20 ? `${msg.substr(0, 20)}...` : msg });\n      }\n    }));\n  }\n\n  // human-readable error messages\n  compiler.apply(new FriendlyErrorsWebpackPlugin({ bundleName, successMessage }));\n\n  return {\n    compiler,\n    webpackConfig,\n    clean: () => webpackConfig.output.path && execSync(`rm -Rf ${webpackConfig.output.path}`),\n    run: () => promiseCallback(done => compiler.run(done)).then(buildThrowOnError),\n    watch: (callback) => compiler.watch({}, (err, stats) => {\n      if (err) return;\n      if (stats.hasErrors()) return;\n      buildThrowOnError(stats);\n      callback(stats);\n    }),\n  };\n};\n"]}