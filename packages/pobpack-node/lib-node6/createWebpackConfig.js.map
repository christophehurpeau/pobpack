{"version":3,"sources":["../src/createWebpackConfig.js"],"names":["options","env","hmr","production","mainBabelOptions","babelrc","cacheDirectory","presets","require","resolve","babel","target","externals","whitelist","cache","performance","hints","resolveLoader","modules","resolveLoaderModules","extensions","mainFields","filter","Boolean","aliasFields","entry","index","join","paths","src","output","path","build","filename","sourceMapFilename","publicPath","libraryTarget","module","rules","parser","requireEnsure","test","loader","exclude","loaders","jsLoaders","moduleRules","plugins","prependPlugins","DefinePlugin","JSON","stringify","SourceMapDevToolPlugin","NoEmitOnErrorsPlugin","HotModuleReplacementPlugin","NamedModulesPlugin","BannerPlugin","banner","raw","entryOnly","include"],"mappings":"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","file":"createWebpackConfig.js","sourcesContent":["// const fs = require('fs');\nimport path from 'path';\nimport webpack from 'webpack';\nimport nodeExternals from 'webpack-node-externals';\nimport CaseSensitivePathsPlugin from 'case-sensitive-paths-webpack-plugin';\nimport createOptions, { type OptionsType } from './createOptions';\n\nexport default (options: OptionsType) => {\n  options = createOptions(options);\n  const env = options.env;\n  const hmr = options.hmr;\n  const production = env === 'production';\n\n  const mainBabelOptions = {\n    babelrc: false,\n    cacheDirectory: hmr,\n    presets: [\n      require.resolve('./babel'),\n    ],\n    ...options.babel,\n  };\n\n  return {\n    // Target node\n    target: 'node',\n    // don't bundle node_modules dependencies\n    externals: nodeExternals({\n      whitelist: [require.resolve('../hot')],\n    }),\n    // use cache\n    cache: hmr,\n    // bundle size is not relevant for node\n    performance: {\n      hints: false,\n    },\n    resolveLoader: {\n      modules: options.resolveLoaderModules || ['node_modules'],\n    },\n    resolve: {\n      modules: ['node_modules'],\n      extensions: ['.js', '.jsx'],\n      mainFields: [\n        !production && 'webpack:node-dev',\n        'webpack:node',\n        !production && 'webpack:main-dev',\n        'webpack:main',\n        !production && 'main-dev',\n        'main',\n      ].filter(Boolean),\n      aliasFields: [\n        !production && 'webpack:node-aliases-dev',\n        'webpack:node-aliases',\n        'webpack',\n      ].filter(Boolean),\n    },\n    entry: {\n      index: [\n        hmr && require.resolve('../hot'),\n        path.join(path.resolve(options.paths.src), options.paths.entry),\n      ].filter(Boolean),\n    },\n    output: {\n      path: path.resolve(options.paths.build),\n      filename: '[name].js',\n      sourceMapFilename: '[name].map',\n      publicPath: '/',\n      libraryTarget: 'commonjs2',\n    },\n\n    module: {\n      rules: [\n        // Disable require.ensure as it's not a standard language feature.\n        { parser: { requireEnsure: false } },\n\n        // json\n        {\n          test: /\\.json$/,\n          loader: 'json-loader',\n        },\n\n        // jsx?\n        {\n          test: /\\.jsx?$/,\n          exclude: [\n            /node_modules/,\n            options.paths.build,\n          ],\n          loaders: [\n            { loader: 'babel-loader', options: mainBabelOptions },\n            ...(options.jsLoaders || []),\n          ],\n        },\n\n        // other rules\n        ...(options.moduleRules || []),\n      ],\n    },\n\n    plugins: [\n      ...(options.prependPlugins || []),\n\n      // enforces the entire path of all required modules match the exact case\n      // of the actual path on disk. Using this plugin helps alleviate cases\n      // for developers working on case insensitive systems like OSX.\n      !production && new CaseSensitivePathsPlugin(),\n\n      new webpack.DefinePlugin({\n        'process.env.NODE_ENV': JSON.stringify(env),\n        ...(production ? { 'module.hot': false } : {}),\n      }),\n\n      // get right stack traces\n      new webpack.SourceMapDevToolPlugin({\n        test: /\\.jsx?$/,\n        filename: '[name].js.map',\n      }),\n\n      new webpack.NoEmitOnErrorsPlugin(),\n\n      hmr && new webpack.HotModuleReplacementPlugin(),\n      hmr && new webpack.NamedModulesPlugin(),\n      hmr && new webpack.BannerPlugin({\n        banner: `require(\"${require.resolve('source-map-support')}\").install({ environment: \"node\" });`,\n        raw: true,\n        entryOnly: false,\n        include: /\\.js$/,\n      }),\n      ...(options.plugins || []),\n    ].filter(Boolean),\n  };\n};\n"]}