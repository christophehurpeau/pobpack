{"version":3,"sources":["../src/createOptions.js"],"names":["options","env","process","NODE_ENV","hmr","resolveLoaderModules","babel","jsLoaders","moduleRules","plugins","prependPlugins","paths","src","build","entry"],"mappings":";;;;;;;;kBAkBgBA,OAAD,KAAmC;AAChDC,OAAKD,QAAQC,GAAR,IAAeC,QAAQD,GAAR,CAAYE,QADgB;AAEhDC,OAAKJ,QAAQI,GAFmC;AAGhDC,wBAAsBL,QAAQK,oBAHkB;AAIhDC,SAAON,QAAQM,KAJiC;AAKhDC,aAAWP,QAAQO,SAL6B;AAMhDC,eAAaR,QAAQQ,WAN2B;AAOhDC,WAAST,QAAQS,OAP+B;AAQhDC,kBAAgBV,QAAQU,cARwB;AAShDC,oBAASC,KAAK,KAAd,EAAqBC,OAAO,OAA5B,EAAqCC,OAAO,UAA5C,IAA2Dd,QAAQW,KAAnE;AATgD,CAAnC,C","file":"createOptions.js","sourcesContent":["type ConfigPathsType = {|\n  src: string,\n  build: string,\n  entry: string,\n|};\n\nexport type OptionsType = {\n  env: ?string,\n  hmr: boolean,\n  resolveLoaderModules: ?Array<string>,\n  babel: ?Object,\n  jsLoaders: ?Array<any>,\n  moduleRules: ?Array<any>,\n  prependPlugins: ?Array<any>,\n  plugins: ?Array<any>,\n  paths: ConfigPathsType,\n}\n\nexport default (options: Object): OptionsType => ({\n  env: options.env || process.env.NODE_ENV,\n  hmr: options.hmr,\n  resolveLoaderModules: options.resolveLoaderModules,\n  babel: options.babel,\n  jsLoaders: options.jsLoaders,\n  moduleRules: options.moduleRules,\n  plugins: options.plugins,\n  prependPlugins: options.prependPlugins,\n  paths: { src: 'src', build: 'build', entry: 'index.js', ...options.paths },\n});\n"]}