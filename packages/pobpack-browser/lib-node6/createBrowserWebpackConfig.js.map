{"version":3,"sources":["../src/createBrowserWebpackConfig.js"],"names":["MODERN","ALL","TARGETS","target","options","bail","env","devtool","cache","hmr","devServer","watchOptions","ignored","node","fs","module","resolveLoader","modules","resolveLoaderModules","resolve","filter","Boolean","babel","presets","require","plugins","entry","entries","reduce","key","path","join","paths","src","output","build","devtoolModuleFilenameTemplate"],"mappings":";;;;;;;AAAA;;;;AACA;;AAMA;;;;;;AAIO,MAAMA,0BAAS,QAAf;AACA,MAAMC,oBAAM,KAAZ;AACA,MAAMC,4BAAU,CAACD,GAAD,EAAMD,MAAN,CAAhB;;kBAESG,MAAD,IAAgCC,OAAD,KAA2B;AACvE;AACAC,QAAMD,QAAQE,GAAR,KAAgB,YAFiD;;AAIvE;AACAH,UAAQ,KAL+D;;AAOvE;AACAI,WAASH,QAAQE,GAAR,KAAgB,YAAhB,GAA+B,sBAA/B,GAAwD,YARM;;AAUvE;AACAE,SAAOJ,QAAQK,GAXwD;;AAavEC,aAAW;AACT;AACAC,kBAAc;AACZC,eAAS;AADG;AAFL,GAb4D;;AAoBvE;AACA;AACA;AACAC,QAAM;AACJC,QAAI,OADA;AAEJC,YAAQ;AAFJ,GAvBiE;;AA4BvEC,iBAAe;AACbC,aAASb,QAAQc,oBAAR;AADI,GA5BwD;;AAgCvEC,WAAS,uCACP,CAAChB,WAAWH,MAAX,IAAqB,iBAAtB,EAAyC,SAAzC,EAAoDoB,MAApD,CAA2DC,OAA3D,CADO,oBAGFjB,OAHE;AAILkB;AACEC,eAAS,CAACC,QAAQL,OAAR,CAAgB,SAAhB,CAAD;AADX,OAEKf,QAAQkB,KAFb;AAGEG,eAAS,CAACrB,QAAQK,GAAR,mBAAD,EAAsC,IAAIL,QAAQkB,KAAR,CAAcG,OAAd,MAAJ,CAAtC,EAAwEL,MAAxE,CACPC,OADO;AAHX;AAJK,KAhC8D;;AA8CvEK,SAAOtB,QAAQuB,OAAR,CAAgBC,MAAhB,CAAuB,CAACD,OAAD,EAAUD,KAAV,MACxB,OAAOA,KAAP,KAAiB,QADO,KACGA,QAAQ,EAAEG,KAAKH,KAAP,EAAcI,MAAMJ,KAApB,EADX,GAE5BC,QAAQD,MAAMG,GAAd,IAAqB,CACnB1B,WAAWH,MAAX,IAAqBwB,QAAQL,OAAR,CAAgB,2BAAhB,CADF,EAEnBf,QAAQK,GAAR,IAAee,QAAQL,OAAR,CAAgB,wBAAhB,CAFI,EAGnBf,QAAQK,GAAR,IAAee,QAAQL,OAAR,CAAgB,qCAAhB,CAHI,EAInB,eAAKY,IAAL,CAAU,eAAKZ,OAAL,CAAaf,QAAQ4B,KAAR,CAAcC,GAA3B,CAAV,EAA2CP,MAAMI,IAAjD,CAJmB,EAKnBV,MALmB,CAKZC,OALY,CAFO,EAQrBM,OARqB,CAAvB,KA9CgE;;AAyDvEO,UAAQ;AACNJ,UAAM,eAAKX,OAAL,CAAaf,QAAQ4B,KAAR,CAAcG,KAA3B,CADA;AAENC,mCAA+B;AAFzB,GAzD+D;;AA8DvErB,UAAQ,sCAAmBX,OAAnB,CA9D+D;;AAgEvEqB,WAAS,uCAAoBrB,OAApB;AAhE8D,CAA3B,C","file":"createBrowserWebpackConfig.js","sourcesContent":["import path from 'path';\nimport {\n  createModuleConfig,\n  createPluginsConfig,\n  createResolveConfig,\n  type OptionsType,\n} from 'pobpack-utils/src';\nimport hotLoaderBabelPlugin from 'react-hot-loader/babel';\n\ntype BrowserTargetType = 'modern' | 'all';\n\nexport const MODERN = 'modern';\nexport const ALL = 'all';\nexport const TARGETS = [ALL, MODERN];\n\nexport default (target: BrowserTargetType) => (options: OptionsType) => ({\n  // Don't attempt to continue if there are any errors.\n  bail: options.env === 'production',\n\n  // Target web\n  target: 'web',\n\n  // get right stack traces\n  devtool: options.env === 'production' ? 'nosources-source-map' : 'source-map',\n\n  // use cache\n  cache: options.hmr,\n\n  devServer: {\n    // don't watch node_modules (improve cpu and memory usage)\n    watchOptions: {\n      ignored: /node_modules/,\n    },\n  },\n\n  // Some libraries import Node modules but don't use them in the browser.\n  // Tell Webpack to provide empty mocks for them so importing them works.\n  // fs and module are used by source-map-support\n  node: {\n    fs: 'empty',\n    module: 'empty',\n  },\n\n  resolveLoader: {\n    modules: options.resolveLoaderModules || ['node_modules'],\n  },\n\n  resolve: createResolveConfig(\n    [target === MODERN && 'modern-browsers', 'browser'].filter(Boolean),\n    {\n      ...options,\n      babel: {\n        presets: [require.resolve('./babel')],\n        ...options.babel,\n        plugins: [options.hmr && hotLoaderBabelPlugin, ...(options.babel.plugins || [])].filter(\n          Boolean,\n        ),\n      },\n    },\n  ),\n\n  entry: options.entries.reduce((entries, entry) => {\n    if (typeof entry === 'string') entry = { key: entry, path: entry };\n    entries[entry.key] = [\n      target !== MODERN && require.resolve('babel-regenerator-runtime'),\n      options.hmr && require.resolve('react-hot-loader/patch'),\n      options.hmr && require.resolve('react-dev-utils/webpackHotDevClient'),\n      path.join(path.resolve(options.paths.src), entry.path),\n    ].filter(Boolean);\n    return entries;\n  }, {}),\n\n  output: {\n    path: path.resolve(options.paths.build),\n    devtoolModuleFilenameTemplate: 'file://[absolute-resource-path]',\n  },\n\n  module: createModuleConfig(options),\n\n  plugins: createPluginsConfig(options),\n});\n"]}