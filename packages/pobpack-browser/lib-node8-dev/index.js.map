{"version":3,"sources":["../src/index.js"],"names":["TARGETS","ALL","MODERN","createAppBrowserCompiler","target","options","compilerOptions","paths","build","compilers","map","t","hmr","clean","compiler","run","watch","callback","undefined","runDevServer","port","https","webpackDevServerOptions","browserDevServer","hot","quiet","overlay","listen","watchAndRunDevServer","runOptions","url","successMessage","webpackDevServer"],"mappings":";;;;;;;AAAA;;;;AACA;;AAOA;;;;;;;;;;;;;;;;;;QAESA,O;QAASC,G;QAAKC,M;AAEhB,MAAMC,8DAA2B,CACtCC,MADsC,EAEtCC,OAFsC,EAGtCC,eAHsC;AAAA,oBAChC,8BADgC;;AAAA,qBAE/B,sCAF+B;;AAAA,mDAIrC,8CAJqC;;AAAA;;AAAA;;AAAA,4BAKtC,yCACEF,MADF,EAEE,0CAAuB,0CAA2BA,MAA3B,CAAvB,oBACKC,OADL;AAEEE,2BAASC,OAAO,QAAhB,IAA6BH,QAAQE,KAArC;AAFF,KAFF,EAMED,eANF,CALsC;AAAA,CAAjC;;AAcA,MAAME,wBAAQ,CAACH,YAAD,KAAkB;AACrC,QAAMI,YAAY,oCAAQC,GAAR,CAAYC,KAAKR,yBAAyBQ,CAAzB,oBAAiCN,OAAjC,IAA0CO,KAAK,KAA/C,IAAjB,CAAlB;AACAH,YAAU,CAAV,EAAaI,KAAb;AACA,SAAOJ,UAAUC,GAAV,CAAcI,YAAYA,SAASC,GAAT,EAA1B,CAAP;AACD,CAJM;;AAMA,MAAMC,wBAAQ,CAACX,OAAD,EAAUY,QAAV,KAA0C;AAAA,sBAAxB,4CAAwB;;AAAA;;AAC7D,MAAI,OAAOZ,OAAP,KAAmB,UAAvB,EAAmC;AACjCY,oCAAWZ,OAAX;AACAA,cAAUa,SAAV;AACD;AACD,QAAMJ,WAAWX,+EAAsCE,OAAtC,IAA+CO,KAAK,IAApD,IAAjB;AACAE,WAASD,KAAT;AACAC,WAASE,KAAT,CAAeC,QAAf;AACA,SAAOH,QAAP;AACD,CATM;;AAWP,4DAAkB,6BAChB,uCAAM,8BAAN,CADgB,EAEhB,wCAAO,+BAAC,+BAAD,CAAP,CAFgB,CAAlB;;AAKO,MAAMK,eAAe,CAACL,QAAD,EAAgCT,OAAhC,KAAwD;AAAA,sBAA/C,8CAA+C;;AAAA;;AAAA,yCAAjB,UAAiB;;AAClF,QAAM,EAAEe,IAAF,EAAQC,KAAR,KAA8ChB,OAApD;AAAA,QAAwBiB,uBAAxB,4BAAoDjB,OAApD;AACA,QAAMkB,mBAAmB,+BAAqBT,SAASA,QAA9B;AACvBU,SAAK,IADkB;AAEvB;AACAC,WAAO,IAHgB,EAGV;AACb;AACAJ,SALuB;AAMvBK,aAAS;AANc,KAOpBJ,uBAPoB,EAAzB;AASAC,mBAAiBI,MAAjB,CAAwBP,IAAxB;AACA,SAAOG,gBAAP;AACD,CAbM;;;AAeA,MAAMK,sDAAuB,CAACvB,OAAD,EAAuBwB,UAAvB,KAAkD;AAAA,sBAA1C,sCAA0C;;AAAA;;AAAA,4CAAjB,UAAiB;;AACpF,QAAMC,MAAO,OAAMD,WAAWR,KAAX,GAAmB,GAAnB,GAAyB,EAAG,gBAAeQ,WAAWT,IAAK,EAA9E;AACA,QAAMN,WAAWX,+EAEVE,OAFU,IAEDO,KAAK,IAFJ,KAGf;AACEmB,oBAAiB,qCAAoCD,GAAI;AAD3D,GAHe,CAAjB;AAOAhB,WAASD,KAAT;AACA,QAAMmB,mBAAmBb,aAAaL,QAAb,EAAuBe,UAAvB,CAAzB;AACA,2BAAYf,QAAZ,IAAsBkB,gBAAtB;AACD,CAZM","file":"index.js","sourcesContent":["import WebpackDevServer from 'webpack-dev-server';\nimport {\n  createPobpackCompiler,\n  createAppWebpackConfig,\n  type OptionsType,\n  type PobpackCompilerType,\n  type WatchCallbackType,\n} from 'pobpack-utils/src';\nimport createBrowserWebpackConfig, { TARGETS, ALL, MODERN } from './createBrowserWebpackConfig';\n\nexport { TARGETS, ALL, MODERN };\n\nexport const createAppBrowserCompiler = (\n  target: string,\n  options: OptionsType,\n  compilerOptions,\n): PobpackCompilerType =>\n  createPobpackCompiler(\n    target,\n    createAppWebpackConfig(createBrowserWebpackConfig(target))({\n      ...options,\n      paths: { build: 'public', ...options.paths },\n    }),\n    compilerOptions,\n  );\n\nexport const build = (options = {}) => {\n  const compilers = TARGETS.map(t => createAppBrowserCompiler(t, { ...options, hmr: false }));\n  compilers[0].clean();\n  return compilers.map(compiler => compiler.run());\n};\n\nexport const watch = (options, callback: WatchCallbackType) => {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  const compiler = createAppBrowserCompiler(MODERN, { ...options, hmr: true });\n  compiler.clean();\n  compiler.watch(callback);\n  return compiler;\n};\n\ntype RunOptions = {\n  port: number,\n  https: ?boolean,\n};\n\nexport const runDevServer = (compiler: PobpackCompilerType, options: RunOptions) => {\n  const { port, https, ...webpackDevServerOptions } = options;\n  const browserDevServer = new WebpackDevServer(compiler.compiler, {\n    hot: true,\n    // stats: 'errors-only',\n    quiet: true, // errors are displayed with friendly-errors plugin\n    // without page refresh as fallback in case of build failures: hotOnly: true,\n    https,\n    overlay: true,\n    ...webpackDevServerOptions,\n  });\n  browserDevServer.listen(port);\n  return browserDevServer;\n};\n\nexport const watchAndRunDevServer = (options: OptionsType, runOptions: RunOptions) => {\n  const url = `http${runOptions.https ? 's' : ''}://localhost:${runOptions.port}`;\n  const compiler = createAppBrowserCompiler(\n    MODERN,\n    { ...options, hmr: true },\n    {\n      successMessage: `Your application is running here: ${url}`,\n    },\n  );\n  compiler.clean();\n  const webpackDevServer = runDevServer(compiler, runOptions);\n  return { ...compiler, webpackDevServer };\n};\n"]}