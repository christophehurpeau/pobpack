{"version":3,"sources":["../src/createBrowserWebpackConfig.js"],"names":["MODERN","ALL","TARGETS","target","options","cache","hmr","resolveLoader","modules","resolveLoaderModules","resolve","filter","Boolean","babel","presets","require","entry","entries","reduce","key","path","join","paths","src","output","build","module","plugins"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;;;;;AAOA,0EAAyB,oEAAW,mCAAX,CAAzB;;AAEO,MAAMA,0BAAS,QAAf;AACA,MAAMC,oBAAM,KAAZ;AACA,MAAMC,4BAAU,CAACD,GAAD,EAAMD,MAAN,CAAhB;;kBAEQ,oCAACG,MAAD;AAAA,wCAAO,iBAAP;;AAAA,SAAgCC,OAAD;AAAA,uBAAQ,sCAAR;;AAAA;;AAAA,WAA2B;AACvE;AACAD,cAAQ,KAF+D;;AAIvE;AACAE,aAAOD,QAAQE,GALwD;;AAOvEC,qBAAe;AACbC,iBAASJ,QAAQK,oBAAR;AADI,OAPwD;;AAWvEC,eAAS,uCAAoB,CAACP,WAAWH,MAAX,IAAqB,iBAAtB,EAAyC,SAAzC,EAAoDW,MAApD,CAA2DC,OAA3D,CAApB,oBACJR,OADI;AAEPS;AACEC,mBAAS,CAACC,QAAQL,OAAR,CAAgB,SAAhB,CAAD;AADX,WAEKN,QAAQS,KAFb;AAFO,SAX8D;;AAmBvEG,aAAOZ,QAAQa,OAAR,CAAgBC,MAAhB,CACL,CAACD,OAAD,EAAUD,KAAV,KAAoB;AAClB,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+BA,QAAQ,EAAEG,KAAKH,KAAP,EAAcI,MAAMJ,KAApB,EAAR;AAC/BC,gBAAQD,MAAMG,GAAd,IAAqB,CACnBhB,WAAWH,MAAX,IAAqB,2BADF;AAEnB;AACA,uBAAKqB,IAAL,CAAU,eAAKX,OAAL,CAAaN,QAAQkB,KAAR,CAAcC,GAA3B,CAAV,EAA2CP,MAAMI,IAAjD,CAHmB,EAInBT,MAJmB,CAIZC,OAJY,CAArB;AAKA,eAAOK,OAAP;AACD,OATI,KAnBgE;;AAgCvEO,cAAQ;AACNJ,cAAM,eAAKV,OAAL,CAAaN,QAAQkB,KAAR,CAAcG,KAA3B;AADA,OAhC+D;;AAoCvEC,cAAQ,sCAAmBtB,OAAnB,CApC+D;;AAsCvEuB,eAAS,uCAAoBvB,OAApB;AAtC8D,KAA3B;AAAA,GAA/B;AAAA,C","file":"createBrowserWebpackConfig.js","sourcesContent":["import path from 'path';\nimport {\n  createModuleConfig,\n  createPluginsConfig,\n  createResolveConfig,\n  type OptionsType,\n} from 'pobpack-utils/src';\n\ntype BrowserTargetType = 'modern' | 'all';\n\nexport const MODERN = 'modern';\nexport const ALL = 'all';\nexport const TARGETS = [ALL, MODERN];\n\nexport default (target: BrowserTargetType) => (options: OptionsType) => ({\n  // Target web\n  target: 'web',\n\n  // use cache\n  cache: options.hmr,\n\n  resolveLoader: {\n    modules: options.resolveLoaderModules || ['node_modules'],\n  },\n\n  resolve: createResolveConfig([target === MODERN && 'modern-browsers', 'browser'].filter(Boolean), {\n    ...options,\n    babel: {\n      presets: [require.resolve('./babel')],\n      ...options.babel,\n    },\n  }),\n\n  entry: options.entries.reduce(\n    (entries, entry) => {\n      if (typeof entry === 'string') entry = { key: entry, path: entry };\n      entries[entry.key] = [\n        target !== MODERN && 'babel-regenerator-runtime',\n        // options.hmr && 'react-hot-loader/patch',\n        path.join(path.resolve(options.paths.src), entry.path),\n      ].filter(Boolean);\n      return entries;\n    },\n    {},\n  ),\n\n  output: {\n    path: path.resolve(options.paths.build),\n  },\n\n  module: createModuleConfig(options),\n\n  plugins: createPluginsConfig(options),\n});\n"]}